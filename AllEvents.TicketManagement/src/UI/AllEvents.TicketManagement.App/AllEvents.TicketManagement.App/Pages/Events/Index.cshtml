@page
@model AllEvents.TicketManagement.App.Pages.Events.IndexModel
@{
    ViewData["Title"] = "Events";
}

<h1>Events</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

<div class="d-flex mb-3">
    <a class="btn btn-primary me-2" asp-page="/Events/Create">Create New</a>

    <form method="get" class="d-flex flex-grow-1">
        <div class="input-group input-group-sm me-2">
            <span class="input-group-text">Category</span>
            <select id="categoryFilter" name="category" class="form-select">
                <option value="">All</option>
                @foreach (var category in Model.Categories)
                {
                    <!option value="@category" @(Model.SelectedCategory == category ? "selected" : "")>@category</!option>
                }
            </select>
        </div>
        <div class="input-group input-group-sm me-2">
            <span class="input-group-text">Title</span>
            <input type="text" id="titleFilter" name="title" class="form-control" value="@Model.SelectedTitle" placeholder="Search" />
        </div>
        <div class="input-group input-group-sm me-2">
            <span class="input-group-text">Sort By</span>
            <select id="sortBy" name="sortBy" class="form-select">
                <!option value="EventDate" @(Model.SortBy == "EventDate" ? "selected" : "")>Date</!option>
                <!option value="Price" @(Model.SortBy == "Price" ? "selected" : "")>Price</!option>
            </select>
        </div>
        <div class="input-group input-group-sm me-2">
            <span class="input-group-text">Order</span>
            <select id="ascending" name="ascending" class="form-select">
                <!option value="true" @(Model.Ascending ? "selected" : "")>Asc</!option>
                <!option value="false" @(Model.Ascending == false ? "selected" : "")>Desc</!option>
            </select>
        </div>
        <input type="hidden" name="pageNumber" value="@Model.CurrentPage" />
        <input type="hidden" name="pageSize" value="@Model.PageSize" />
        <button type="submit" class="btn btn-sm btn-secondary">Filter</button>
    </form>
</div>

@if (Model.Events != null && Model.Events.Any())
{
    <table class="table table-sm table-striped text-center">
        <thead>
            <tr>
                <th>Title</th>
                <th>Location</th>
                <th>Price</th>
                <th>Category</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventItem in Model.Events)
            {
                <tr>
                    <td>@eventItem.Title</td>
                    <td>@eventItem.Location</td>
                    <td>@eventItem.Price</td>
                    <td>@eventItem.Category</td>
                    <td>@eventItem.EventDate.ToShortDateString()</td>
                    <td>
                        <a class="btn btn-sm btn-primary" asp-page="/Events/Update" asp-route-id="@eventItem.EventId">Update</a>
                        @if (eventItem.IsDeleted)
                        {
                            <button class="btn btn-sm btn-success" onclick="restoreEvent('@eventItem.EventId')">Restore</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-danger" onclick="deleteEvent('@eventItem.EventId')">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination-controls d-flex justify-content-center align-items-center">
        <form method="get" class="d-flex align-items-center">
            <input type="hidden" name="title" value="@Model.SelectedTitle" />
            <input type="hidden" name="category" value="@Model.SelectedCategory" />
            <input type="hidden" name="sortBy" value="@Model.SortBy" />
            <input type="hidden" name="ascending" value="@Model.Ascending" />
            <input type="hidden" name="pageSize" value="@Model.PageSize" />
            <button type="submit" class="btn btn-sm btn-primary me-2" name="pageNumber" value="@(Model.CurrentPage - 1)" @(Model.CurrentPage <= 1 ? "disabled" : "")>Previous</button>
            <span>Page @Model.CurrentPage of @Model.TotalPages</span>
            <button type="submit" class="btn btn-sm btn-primary ms-2" name="pageNumber" value="@(Model.CurrentPage + 1)" @(Model.CurrentPage >= Model.TotalPages ? "disabled" : "")>Next</button>
        </form>
    </div>
    <div class="pagination-controls d-flex justify-content-between align-items-center">
        <div class="page-size-controls d-flex align-items-center">
            <label for="pageSize" class="form-label mb-0 me-2">Events per page:</label>
            <form method="get">
                <input type="hidden" name="title" value="@Model.SelectedTitle" />
                <input type="hidden" name="category" value="@Model.SelectedCategory" />
                <input type="hidden" name="sortBy" value="@Model.SortBy" />
                <input type="hidden" name="ascending" value="@Model.Ascending" />
                <input type="hidden" name="pageNumber" value="1" />
                <select id="pageSize" name="pageSize" class="form-select form-select-sm" onchange="this.form.submit()">
                    <!option value="5" @(Model.PageSize == 5 ? "selected" : "")>5</!option>
                    <!option value="10" @(Model.PageSize == 10 ? "selected" : "")>10</!option>
                    <!option value="50" @(Model.PageSize == 50 ? "selected" : "")>50</!option>
                </select>
            </form>
        </div>
    </div>
}
else
{
    <p>No events found.</p>
}

@section Scripts {
    <script>
        async function deleteEvent(eventId) {
            try {
                const response = await fetch(`https://localhost:7273/api/Event/${eventId}`, { method: 'DELETE' });
                if (response.ok) {
                    const result = await response.json();
                    alert(result.Message || 'Event removed');
                    location.reload();
                } else {
                    const errorText = await response.text();
                    alert(errorText || 'Failed to delete the event');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        async function restoreEvent(eventId) {
            try {
                const response = await fetch(`https://localhost:7273/api/Event/restore/${eventId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                });
                if (response.ok) {
                    const result = await response.json();
                    alert(result.Message || 'Event restored');
                    location.reload();
                } else {
                    const errorText = await response.text();
                    alert(errorText || 'Failed to restore the event');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    </script>
}
