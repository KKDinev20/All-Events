@page
@model AllEvents.TicketManagement.App.Pages.Events.IndexModel
@{
    ViewData["Title"] = "Events";
}

<h1>Events</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

<a class="btn btn-primary" asp-page="/Events/Create">Create New</a>

@if (Model.Events != null && Model.Events.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Location</th>
                <th>Price</th>
                <th>Category</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventItem in Model.Events)
            {
                <tr>
                    <td>@eventItem.Title</td>
                    <td>@eventItem.Location</td>
                    <td>@eventItem.Price</td>
                    <td>@eventItem.Category</td>
                    <td>@eventItem.EventDate.ToShortDateString()</td>
                    <td>
                        @if (eventItem.IsDeleted)
                        {
                            <button class="btn btn-success" onclick="restoreEvent('@eventItem.EventId')">Restore</button>
                        }
                        else
                        {
                            <button class="btn btn-danger" onclick="deleteEvent('@eventItem.EventId')">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination-controls">
        <form method="get">
            <div class="flex-container">
                <button type="submit" class="btn btn-primary" name="pageNumber" value="@(Model.CurrentPage - 1)" @(Model.CurrentPage <= 1 ? "disabled" : "")>Previous</button>
                <span>Page @Model.CurrentPage of @Model.TotalPages</span>
                <button type="submit" class="btn btn-primary" name="pageNumber" value="@(Model.CurrentPage + 1)" @(Model.CurrentPage >= Model.TotalPages ? "disabled" : "")>Next</button>
            </div>
            <div class="page-size-controls">
                <label for="pageSize">Events per page:</label>
                <select id="pageSize" name="pageSize" onchange="this.form.submit()">
                    <!option value="5" @(Model.PageSize == 5 ? "selected" : "")>5</!option>
                    <!option value="10" @(Model.PageSize == 10 ? "selected" : "")>10</!option>
                    <!option value="50" @(Model.PageSize == 50 ? "selected" : "")>50</!option>
                </select>
            </div>
        </form>
    </div>
}
else
{
    <p>No events found.</p>
}

@section Scripts {
    <script>
        async function deleteEvent(eventId) {
            try {
                const response = await fetch(`https://localhost:7273/api/Event/${eventId}`, { method: 'DELETE' });
                if (response.ok) {
                    const result = await response.json();
                    alert(result.Message || 'Event removed');
                    location.reload();
                } else {
                    const errorText = await response.text();
                    alert(errorText || 'Failed to delete the event');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        async function restoreEvent(eventId) {
            try {
                const response = await fetch(`https://localhost:7273/api/Event/restore/${eventId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                });
                if (response.ok) {
                    const result = await response.json();
                    alert(result.Message || 'Event restored');
                    location.reload();
                } else {
                    const errorText = await response.text();
                    alert(errorText || 'Failed to restore the event');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    </script>
}
